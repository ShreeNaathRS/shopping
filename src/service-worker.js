/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// âœ… Cache manifest.json for offline support
registerRoute(
  ({ url }) => url.pathname.endsWith('manifest.json'),
  new StaleWhileRevalidate({
    cacheName: 'manifest',
  })
);
registerRoute(
  ({ url }) => url.pathname.endsWith('favicon.ico'),
  new StaleWhileRevalidate({
    cacheName: 'favicon',
  })
);
registerRoute(
  ({ url }) => url.pathname.endsWith('logo.svg'),
  new StaleWhileRevalidate({
    cacheName: 'appLogo',
  })
);
registerRoute(
  ({ url }) => url.pathname.startsWith('/assets/'),
  new CacheFirst({
    cacheName: 'assets-cache',
    // plugins: [
    //   new ExpirationPlugin({
    //     maxEntries: 50,
    //     maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
    //   }),
    // ],
  })
);
registerRoute(
  ({ url }) => url.pathname.startsWith('/swift-cart'),
  new StaleWhileRevalidate({
    cacheName: 'api-swift-cart',
  })
);
// App Shell-style routing
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  ({ request, url }) => {
    if (request.mode !== 'navigate') return false;
    if (url.pathname.startsWith('/_')) return false;
    if (url.pathname.match(fileExtensionRegexp)) return false;
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Allow skipWaiting
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
